package ride

import (
	"fmt"
	"goupride_bot/internal/config"
	"goupride_bot/internal/database"
	"goupride_bot/internal/database/table"
	"goupride_bot/internal/services"
	"goupride_bot/internal/utils"
	"log"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

func StartCreateRide(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	chatID := update.CallbackQuery.Message.Chat.ID
	if chatID == cfg.PublicChat {
		return
	}

	utils.SetAwaiting(update.CallbackQuery.From.ID, 600)

	text := `
<b>–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–µ–∑–¥–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —ç—Ç–∞–ø–æ–≤:</b>

1. –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É —Å –º–∞—Ä—à—Ä—É—Ç–æ–º üó∫
2. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ üïí
3. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ —Ñ–æ—Ç–æ, —Ç–µ–º–ø üìùüì∑

üîó <b>–î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ä—à—Ä—É—Ç</b>  
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: komoot.com, connect.garmin.com, ridewithgps.com, nakarte.me
`

	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	buttons, err := services.DisableButtons(update.Message, db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}

	bot.Send(msg)
}

func SaveLink(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	chatID := update.Message.Chat.ID
	userId := update.Message.From.ID
	if chatID == cfg.PublicChat {
		return
	}

	link := update.Message.Text

	err := db.Ride.CreateRide(table.Ride{
		UserID: userId,
		Active: true,
		Ready:  false,
		Link:   link,
	})

	if err != nil {
		text := `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`
		bot.Send(tgbotapi.NewMessage(chatID, text))
		log.Fatalf("failed create new ride: %s", err)
		return
	}

	utils.NextAwaitRideStep(userId)

	text := `üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: 08.06.2025 12:30`
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	buttons, err := services.DisableButtons(update.Message, db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}

	bot.Send(msg)
}

func SaveTime(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	chatID := update.Message.Chat.ID
	userId := update.Message.From.ID
	if chatID == cfg.PublicChat {
		return
	}

	ride, err := db.Ride.FindNoReadyRideByUser(userId)
	if err != nil {
		text := `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`
		bot.Send(tgbotapi.NewMessage(chatID, text))
		log.Fatalf("failed attach time to new ride: %s", err)
		return
	}

	layout := "02.01.2006 15:04"
	parsedTime, err := time.Parse(layout, update.Message.Text)
	if err != nil {
		text := "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –≤ –≤–∏–¥–µ: 08.06.2025 12:30"
		bot.Send(tgbotapi.NewMessage(chatID, text))
		return
	}

	ride.StartDate = parsedTime

	err = db.Ride.UpdateRide(*ride)
	if err != nil {
		text := `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`
		bot.Send(tgbotapi.NewMessage(chatID, text))
		log.Fatalf("failed attach time to new ride: %s", err)
		return
	}

	utils.NextAwaitRideStep(userId)

	text := `‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üì∑`
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	buttons, err := services.DisableButtons(update.Message, db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}

	bot.Send(msg)
}

func SaveDescription(bot *tgbotapi.BotAPI, update tgbotapi.Update, db database.Database, cfg config.Bot) {
	chatID := update.Message.Chat.ID
	userId := update.Message.From.ID
	if chatID == cfg.PublicChat {
		return
	}

	ride, err := db.Ride.FindNoReadyRideByUser(userId)

	if err != nil {
		text := `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`
		bot.Send(tgbotapi.NewMessage(chatID, text))
		log.Fatalf("failed attach time to new ride: %s", err)
		return
	}

	var files []table.File
	if update.Message.Photo != nil && len(update.Message.Photo) > 0 {
		photo := update.Message.Photo[len(update.Message.Photo)-1]
		files = append(files, table.File{
			ID:   photo.FileID,
			Type: "photo",
		})
	}

	description := update.Message.Text
	if len(files) > 0 {
		description = update.Message.Caption
		ride.Files = files // files
	}

	ride.Description = description
	ride.Ready = true

	err = db.Ride.UpdateRide(*ride)
	if err != nil {
		text := `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`
		bot.Send(tgbotapi.NewMessage(chatID, text))
		log.Fatalf("failed attach time to new ride: %s", err)
		return
	}

	utils.DeleteAwaiting(userId)

	text := "‚úÖ –°–ø–∞—Å–∏–±–æ! –ó–∞–µ–∑–¥ –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏."
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ParseMode = "HTML"

	buttons, err := services.StartButtons(update.Message, db, cfg)
	if err == nil {
		msg.ReplyMarkup = buttons
	}

	bot.Send(msg)

	if len(ride.Files) > 0 {
		fileID := ride.Files[0].ID
		photoMsg := tgbotapi.NewPhoto(cfg.PublicChat, tgbotapi.FileID(fileID))
		photoMsg.Caption = FormatRideMessage(ride)
		photoMsg.ParseMode = "HTML"
		bot.Send(photoMsg)
	} else {
		msg := tgbotapi.NewMessage(cfg.PublicChat, FormatRideMessage(ride))
		msg.ParseMode = "HTML"
		bot.Send(msg)
	}
}

func FormatRideMessage(ride *table.Ride) string {
	date := ride.StartDate.Format("02.01.2006 –≤ 15:04")
	return fmt.Sprintf(`%s

üìç <b>–ú–∞—Ä—à—Ä—É—Ç:</b> <a href="%s">%s</a>

üïí <b>–°—Ç–∞—Ä—Ç:</b> %s
`, ride.Description, ride.Link, ride.Link, date)
}
